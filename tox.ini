# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, integration

[vars]
tst_path = {toxinidir}/tests/
all_path = {[vars]tst_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}
  PYTHONBREAKPOINT=ipdb.set_trace
passenv =
  PYTHONPATH
  HOME
  PATH
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
commands =
    # pflake8 wrapper suppports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static]
description = Run static analysis checks
deps =
    mypy
    pytest
    pytest-operator
    juju
    types-setuptools
    types-toml
commands =
    mypy {[vars]all_path} {posargs}

[testenv:integration]
deps =
    jinja2
    git+https://github.com/juju/python-libjuju.git
    pytest
    git+https://github.com/charmed-kubernetes/pytest-operator.git
allowlist_externals =
    wget
commands =
    # download the lma-tester charm to deploy later via pytest-operator
    # the bundle-testing.yaml.j2 template expects to find it at
    # ./lma-tester_ubuntu-20.04-amd64.charm
    # building the chram locally would be more involved because would need to checkout the repo
    wget https://github.com/sed-i/lma-tester/releases/download/v0.2/lma-tester_ubuntu-20.04-amd64.charm -O lma-tester_ubuntu-20.04-amd64.charm
    # integration tests expect to have a "bundle-testing.yaml" file.
    # render with defaults (all charms deployed from charmhub)
    ./render_bundle.py ./bundle-testing.yaml.j2 ./bundle-testing.yaml
    pytest -v --tb native -s {posargs} {toxinidir}/tests/integration

[testenv:render]
# This environment can be used to render custom "bundle-testing.yaml" files.
# For a pure bundle test, no arguments should be provided. This way, the bundle yaml is rendered
# with default values (all charms deployed from charmhub).
# For manual/local tests, paths to local charms can be passed to tox, which in turn are passed on
# to the `render_bundle.py` script.
# For example, to render a bundle with a local prometheus charm but all the other charms taken from
# charmhub,
# > tox -e render -- --prometheus=./../prometheus-operator/prometheus-k8s_ubuntu-20.04-amd64.charm
# Or to have all of them deployed locally:
# > tox -e render -- --prometheus=./../prometheus-operator/prometheus-k8s_ubuntu-20.04-amd64.charm --alertmanager=./../alertmanager-operator/alertmanager-k8s_ubuntu-20.04-amd64.charm --grafana=./../grafana-operator/grafana-k8s_ubuntu-20.04-amd64.charm --tester=./../prometheus-tester/prometheus-tester_ubuntu-20.04-amd64.charm
deps =
    jinja2
commands =
    # integration tests expect to have a "bundle-testing.yaml" file
    ./render_bundle.py ./bundle-testing.yaml.j2 ./bundle-testing.yaml {posargs}

[testenv:rendered-integration]
deps =
    git+https://github.com/juju/python-libjuju.git
    pytest
    git+https://github.com/charmed-kubernetes/pytest-operator.git
commands =
    # integration tests expect to have a "bundle-testing.yaml" file.
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration
