# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-bundle

[vars]
tst_path = {toxinidir}/tests
all_path = {[vars]tst_path} {toxinidir}/render_bundle.py

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8 < 5
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    # Need to override pflake8's default exclude patterns, which include '.tpl.py'
    pflake8 --exclude .terraform {[vars]tst_path}/load
    isort --check-only --diff {[vars]all_path}
    black --extend-exclude '/\.terraform/' --check --diff {[vars]all_path}

[testenv:static-{bundle,integration,load}]
description = Run static analysis checks
setenv =
    bundle: MYPYPATH = {toxinidir}/
    integration: MYPYPATH = {[vars]tst_path}/integration
    load: MYPYPATH = {[vars]tst_path}/load/gcp
deps =
    mypy
    types-dataclasses
    types-PyYAML
    types-setuptools
    types-toml
    bundle: jinja2
    integration: {[testenv:integration]deps}
    load: logfmter
    load: faker
    load: locust
commands =
    bundle: mypy {toxinidir}/render_bundle.py
    integration: mypy {[vars]tst_path}/integration
    # Need to pass the filename, otherwise mypy complains:
    # There are no .py[i] files in directory 'tests/load/gcp'
    load: mypy {[vars]tst_path}/load/gcp/loki-log-locustfile.tpl.py

[testenv:integration]
description = Run integration tests
deps =
    jinja2
    juju
    pytest
    pytest-operator==1.0.0b1
commands =
    pytest -vv --tb native --log-cli-level=INFO --color=yes -s {posargs} {[vars]tst_path}/integration

[testenv:render-{edge,beta,candidate,stable}]
description = Render the bundle from template
deps =
    jinja2
allowlist_externals =
    /usr/bin/env
commands =
    edge: /usr/bin/env python3 {toxinidir}/render_bundle.py {toxinidir}/bundle.yaml --channel=edge
    beta: /usr/bin/env python3 {toxinidir}/render_bundle.py {toxinidir}/bundle.yaml --channel=beta
    candidate: /usr/bin/env python3 {toxinidir}/render_bundle.py {toxinidir}/bundle.yaml --channel=candidate
    stable: /usr/bin/env python3 {toxinidir}/render_bundle.py {toxinidir}/bundle.yaml --channel=stable
