# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, integration

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}
  PYTHONBREAKPOINT=ipdb.set_trace
passenv =
  PYTHONPATH
  HOME
  PATH
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[flake8]
exclude =
    .git,
    __pycache__,
    .tox,
    build,
    dist,
    *.egg_info
    venv
max-line-length = 99
max-doc-length = 99
max-complexity = 10
select = E,W,F,C,N,R,D,H
# Ignore W503, E501 because using black creates errors with this
# D107 Missing docstring in __init__
ignore = W503,E501,D107
per-file-ignores =
    # D100 Missing docstring in public module
    # D101 Missing docstring in public class
    # D102 Missing docstring in public method
    # D103 Missing docstring in public function
    tests/*:D100,D101,D102,D103
docstring-convention = google
copyright-check = True
copyright-author = Canonical Ltd.
copyright-regexp = Copyright\s\d{4}([-,]\d{4})*\s+%(author)s

[isort]
profile = black

[testenv:prettify]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {toxinidir}/src/. {toxinidir}/tests/.
    black --line-length=99 --target-version=py38 {toxinidir}/src {toxinidir}/tests

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pep8-naming
    isort
commands =
    flake8 {toxinidir}/tests
    isort --check-only --diff {toxinidir}/tests/.
    black --check --diff --line-length=99 --target-version=py38 {toxinidir}/tests

[testenv:integration]
deps =
    jinja2
    git+https://github.com/juju/python-libjuju.git
    pytest
    git+https://github.com/charmed-kubernetes/pytest-operator.git
commands =
    # integration tests expect to have a "bundle-testing.yaml" file.
    # render with defaults (all charms deployed from charmhub)
    ./render_bundle.py ./bundle-testing.yaml.j2 ./bundle-testing.yaml
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration

[testenv:render]
# This environment can be used to render custom "bundle-testing.yaml" files.
# For a pure bundle test, no arguments should be provided. This way, the bundle yaml is rendered
# with default values (all charms deployed from charmhub).
# For manual/local tests, paths to local charms can be passed to tox, which in turn are passed on
# to the `render_bundle.py` script.
# For example, to render a bundle with a local prometheus charm but all the other charms taken from
# charmhub,
# > tox -e render -- --prometheus=./../prometheus-operator/prometheus-k8s_ubuntu-20.04-amd64.charm
# Or to have all of them deployed locally:
# > tox -e render -- --prometheus=./../prometheus-operator/prometheus-k8s_ubuntu-20.04-amd64.charm --alertmanager=./../alertmanager-operator/alertmanager-k8s_ubuntu-20.04-amd64.charm --grafana=./../grafana-operator/grafana-k8s_ubuntu-20.04-amd64.charm --tester=./../prometheus-tester/prometheus-tester_ubuntu-20.04-amd64.charm
deps =
    jinja2
commands =
    # integration tests expect to have a "bundle-testing.yaml" file
    ./render_bundle.py ./bundle-testing.yaml.j2 ./bundle-testing.yaml {posargs}

[testenv:rendered-integration]
deps =
    git+https://github.com/juju/python-libjuju.git
    pytest
    git+https://github.com/charmed-kubernetes/pytest-operator.git
commands =
    # integration tests expect to have a "bundle-testing.yaml" file.
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration
